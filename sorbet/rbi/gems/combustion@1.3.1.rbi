# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `combustion` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Combustion
  def path; end
  def path=(val); end
  def schema_format; end
  def schema_format=(val); end
  def setup_environment; end
  def setup_environment=(val); end

  class << self
    def include_capybara_into(config); end
    def include_database(modules, options); end
    def include_rspec; end
    def initialize!(*modules, &block); end
    def path; end
    def path=(val); end
    def schema_format; end
    def schema_format=(val); end
    def setup_environment; end
    def setup_environment=(val); end
  end
end

class Combustion::Application < ::Rails::Application
  class << self
    def configure_for_combustion; end
  end
end

Combustion::Application::CONFIGURERS = T.let(T.unsafe(nil), Array)

module Combustion::Configurations
end

class Combustion::Configurations::ActionController
  class << self
    def call(config); end
  end
end

class Combustion::Configurations::ActionMailer
  class << self
    def call(config); end
  end
end

class Combustion::Configurations::ActiveRecord
  class << self
    def call(config); end
  end
end

class Combustion::Configurations::ActiveStorage
  class << self
    def call(config); end
  end
end

class Combustion::Database
  class << self
    def setup(options = T.unsafe(nil)); end
  end
end

Combustion::Database::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

class Combustion::Database::LoadSchema
  def call; end

  private

  def load_ruby_schema; end
  def load_sql_schema; end
  def schema_format; end

  class << self
    def call; end
  end
end

class Combustion::Database::LoadSchema::UnknownSchemaFormat < ::StandardError
end

class Combustion::Database::Migrate
  def call; end

  private

  def base_migration_paths; end
  def engine_migration_paths; end
  def engine_path; end
  def engine_paths_exist_in?(paths); end
  def migration_context; end
  def migrator; end
  def paths; end

  class << self
    def call; end
  end
end

class Combustion::Database::Reset
  def initialize; end

  def call; end

  private

  def database_yaml; end
  def operator_class(adapter); end
  def resettable_db_configs; end
  def resettable_db_configs_for_6_1; end

  class << self
    def call; end
  end
end

Combustion::Database::Reset::OPERATOR_PATTERNS = T.let(T.unsafe(nil), Hash)

Combustion::Database::Reset::RAILS_DEFAULT_ENVIRONMENTS = T.let(T.unsafe(nil), Array)

Combustion::Database::Reset::RUBY_VERSION_WITH_NEW_SAFE_LOAD_METHOD_SIGNATURE = T.let(T.unsafe(nil), String)

class Combustion::Database::Reset::UnsupportedDatabase < ::StandardError
end

module Combustion::Databases
end

class Combustion::Databases::Base
  def initialize(configuration); end

  def connection(*_arg0, &_arg1); end
  def establish_connection(*_arg0, &_arg1); end
  def reset; end

  private

  def base; end
  def configuration; end
end

class Combustion::Databases::Firebird < ::Combustion::Databases::Base
  def reset; end
end

class Combustion::Databases::MySQL < ::Combustion::Databases::Base
  def reset; end

  private

  def charset; end
  def charset_error; end
  def collation; end
  def create; end
  def create_as_root(error); end
  def creation_options; end
  def drop; end
  def error_class; end
  def grant_statement; end
  def request_password(error); end
  def rescue_create_from(error); end
end

Combustion::Databases::MySQL::ACCESS_DENIED_ERROR = T.let(T.unsafe(nil), Integer)

class Combustion::Databases::Oracle < ::Combustion::Databases::Base
  def reset; end
end

class Combustion::Databases::PostgreSQL < ::Combustion::Databases::Base
  def reset; end

  private

  def create; end
  def drop; end
  def encoding; end
  def postgres_configuration; end
  def schema_search_path; end
end

class Combustion::Databases::SQLServer < ::Combustion::Databases::Base
  def reset; end
end

class Combustion::Databases::SQLite < ::Combustion::Databases::Base

  private

  def create; end
  def drop; end
  def exists?; end
  def file; end
  def path; end
end

Combustion::MODULES = T.let(T.unsafe(nil), Hash)
