# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/que/all/que.rbi
#
# que-0.14.3

module Que
  def self.adapter; end
  def self.adapter=(arg0); end
  def self.clear!; end
  def self.connection=(connection); end
  def self.constantize(camel_cased_word); end
  def self.create!; end
  def self.db_version; end
  def self.disable_prepared_statements; end
  def self.disable_prepared_statements=(setting); end
  def self.drop!; end
  def self.enqueue(*args); end
  def self.error_handler; end
  def self.error_handler=(p); end
  def self.error_notifier; end
  def self.error_notifier=(arg0); end
  def self.execute(*args); end
  def self.job_stats; end
  def self.json_converter; end
  def self.json_converter=(arg0); end
  def self.log(data); end
  def self.log_formatter; end
  def self.log_formatter=(arg0); end
  def self.logger; end
  def self.logger=(arg0); end
  def self.migrate!(version = nil); end
  def self.mode(*args); end
  def self.mode=(*args); end
  def self.queue_name(*args); end
  def self.queue_name=(*args); end
  def self.transaction; end
  def self.use_prepared_statements; end
  def self.use_prepared_statements=(arg0); end
  def self.wake!(*args); end
  def self.wake_all!(*args); end
  def self.wake_interval(*args); end
  def self.wake_interval=(*args); end
  def self.worker_count(*args); end
  def self.worker_count=(*args); end
  def self.worker_states; end
end
class Que::Worker
  def _sleeping?; end
  def alive?; end
  def initialize(queue = nil); end
  def queue; end
  def self.mode; end
  def self.mode=(mode); end
  def self.queue_name; end
  def self.queue_name=(arg0); end
  def self.set_up_workers; end
  def self.wake!; end
  def self.wake_all!; end
  def self.wake_interval; end
  def self.wake_interval=(interval); end
  def self.worker_count; end
  def self.worker_count=(count); end
  def self.workers; end
  def self.wrangler; end
  def sleeping?; end
  def state; end
  def stop; end
  def thread; end
  def wait; end
  def wait_until_stopped; end
  def wake!; end
  def work_loop; end
  def working?; end
  include MonitorMixin
end
module Que::Adapters
end
class Que::Adapters::Base
  def cast_result(result); end
  def checkout(&block); end
  def cleanup!; end
  def execute(command, params = nil); end
  def execute_prepared(name, params); end
  def execute_sql(sql, params); end
  def in_transaction?; end
  def initialize(thing = nil); end
  def wake_worker_after_commit; end
end
class Que::Adapters::ActiveRecord < Que::Adapters::Base
  def checkout; end
  def checkout_activerecord_adapter(&block); end
  def cleanup!; end
end
class Que::Railtie < Rails::Railtie
end
class Que::Job
  def _error; end
  def _run; end
  def attrs; end
  def destroy; end
  def error_count; end
  def error_message; end
  def handle_error(error); end
  def initialize(attrs); end
  def retry_in(period); end
  def run(*args); end
  def self.class_for(string); end
  def self.enqueue(*args); end
  def self.error_message(error); end
  def self.queue(*args); end
  def self.retry_interval; end
  def self.run(*args); end
  def self.work(queue = nil); end
end
