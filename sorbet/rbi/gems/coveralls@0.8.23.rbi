# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `coveralls` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Coveralls
  extend(::Coveralls)

  def noisy; end
  def noisy=(_arg0); end
  def noisy?; end
  def push!; end
  def run_locally; end
  def run_locally=(_arg0); end
  def setup!; end
  def should_run?; end
  def start!(simplecov_setting = T.unsafe(nil), &block); end
  def testing; end
  def testing=(_arg0); end
  def wear!(simplecov_setting = T.unsafe(nil), &block); end
  def wear_merged!(simplecov_setting = T.unsafe(nil), &block); end
  def will_run?; end
end

class Coveralls::API
  class << self
    def apified_hash(hash); end
    def build_client(uri); end
    def build_request(path, hash); end
    def build_request_body(hash, boundary); end
    def disable_net_blockers!; end
    def endpoint_to_uri(endpoint); end
    def hash_to_file(hash); end
    def post_json(endpoint, hash); end
  end
end

Coveralls::API::API_BASE = T.let(T.unsafe(nil), String)

Coveralls::API::API_DOMAIN = T.let(T.unsafe(nil), String)

Coveralls::API::API_HOST = T.let(T.unsafe(nil), String)

Coveralls::API::API_PROTOCOL = T.let(T.unsafe(nil), String)

module Coveralls::Configuration
  class << self
    def configuration; end
    def configuration_path; end
    def git; end
    def pwd; end
    def rails_root; end
    def relevant_env; end
    def root; end
    def set_service_params_for_appveyor(config); end
    def set_service_params_for_circleci(config); end
    def set_service_params_for_coveralls_local(config); end
    def set_service_params_for_gitlab(config); end
    def set_service_params_for_jenkins(config); end
    def set_service_params_for_semaphore(config); end
    def set_service_params_for_tddium(config); end
    def set_service_params_for_travis(config, service_name); end
    def set_standard_service_params_for_generic_ci(config); end
    def simplecov_root; end
    def yaml_config; end
  end
end

class Coveralls::NilFormatter
  def format(result); end
end

module Coveralls::Output
  extend(::Coveralls::Output)

  def format(string, options = T.unsafe(nil)); end
  def no_color; end
  def no_color=(_arg0); end
  def no_color?; end
  def output; end
  def output=(_arg0); end
  def print(string, options = T.unsafe(nil)); end
  def puts(string, options = T.unsafe(nil)); end
  def silent; end
  def silent=(_arg0); end
  def silent?; end
end

module Coveralls::SimpleCov
end

class Coveralls::SimpleCov::Formatter
  def display_error(e); end
  def display_result(result); end
  def format(result); end
  def get_source_files(result); end
  def output_message(result); end
  def short_filename(filename); end
end

Coveralls::VERSION = T.let(T.unsafe(nil), String)
