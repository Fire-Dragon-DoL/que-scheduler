# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/actionpack/all/actionpack.rbi
#
# actionpack-6.0.3.2

module ActionPack
  def self.gem_version; end
  def self.version; end
end
module ActionPack::VERSION
end
module Rack
end
module ActionDispatch
  def self.test_app; end
  def self.test_app=(obj); end
  def test_app; end
  def test_app=(obj); end
  extend ActiveSupport::Autoload
end
class ActionDispatch::IllegalStateError < StandardError
end
class ActionDispatch::MissingController < NameError
end
module ActionDispatch::Http
  extend ActiveSupport::Autoload
end
module ActionDispatch::Session
end
class ActionDispatch::Railtie < Rails::Railtie
end
module AbstractController
  def self.eager_load!; end
  extend ActiveSupport::Autoload
end
class ActionDispatch::Http::UploadedFile
  def close(unlink_now = nil); end
  def content_type; end
  def content_type=(arg0); end
  def eof?; end
  def headers; end
  def headers=(arg0); end
  def initialize(hash); end
  def open; end
  def original_filename; end
  def original_filename=(arg0); end
  def path; end
  def read(length = nil, buffer = nil); end
  def rewind; end
  def size; end
  def tempfile; end
  def tempfile=(arg0); end
  def to_io; end
  def to_path; end
end
module ActionController
  extend ActiveSupport::Autoload
end
class ActionController::ParameterMissing < KeyError
  def initialize(param); end
  def param; end
end
class ActionController::UnpermittedParameters < IndexError
  def initialize(params); end
  def params; end
end
class ActionController::UnfilteredParameters < ArgumentError
  def initialize; end
end
class ActionController::Parameters
  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def always_permitted_parameters; end
  def always_permitted_parameters=(obj); end
  def array_of_permitted_scalars?(value); end
  def as_json(*args, &block); end
  def convert_hashes_to_parameters(key, value); end
  def convert_parameters_to_hashes(value, using); end
  def convert_value_to_parameters(value); end
  def converted_arrays; end
  def deep_dup; end
  def delete(key, &block); end
  def delete_if(&block); end
  def dig(*keys); end
  def each(&block); end
  def each_element(object); end
  def each_key(*args, &block); end
  def each_pair(&block); end
  def each_value(&block); end
  def empty?(*args, &block); end
  def except(*keys); end
  def extract!(*keys); end
  def fetch(key, *args); end
  def fields_for_style?; end
  def has_key?(*args, &block); end
  def has_value?(*args, &block); end
  def hash_filter(params, filter); end
  def include?(*args, &block); end
  def init_with(coder); end
  def initialize(parameters = nil); end
  def initialize_copy(source); end
  def inspect; end
  def keep_if(&block); end
  def key?(*args, &block); end
  def keys(*args, &block); end
  def merge!(other_hash); end
  def merge(other_hash); end
  def new_instance_with_inherited_permitted_status(hash); end
  def non_scalar?(value); end
  def parameters; end
  def permit!; end
  def permit(*filters); end
  def permit_any_in_array(array); end
  def permit_any_in_parameters(params); end
  def permitted=(arg0); end
  def permitted?; end
  def permitted_scalar?(value); end
  def permitted_scalar_filter(params, permitted_key); end
  def reject!(&block); end
  def reject(&block); end
  def require(key); end
  def required(key); end
  def reverse_merge!(other_hash); end
  def reverse_merge(other_hash); end
  def select!(&block); end
  def select(&block); end
  def self.action_on_unpermitted_parameters; end
  def self.action_on_unpermitted_parameters=(obj); end
  def self.always_permitted_parameters; end
  def self.always_permitted_parameters=(obj); end
  def self.hook_into_yaml_loading; end
  def self.permit_all_parameters; end
  def self.permit_all_parameters=(obj); end
  def slice!(*keys); end
  def slice(*keys); end
  def stringify_keys; end
  def to_h; end
  def to_hash; end
  def to_param(*args); end
  def to_query(*args); end
  def to_s(*args, &block); end
  def to_unsafe_h; end
  def to_unsafe_hash; end
  def transform_keys!(&block); end
  def transform_keys(&block); end
  def transform_values!; end
  def transform_values; end
  def unpermitted_keys(params); end
  def unpermitted_parameters!(params); end
  def value?(*args, &block); end
  def values(*args, &block); end
  def values_at(*keys); end
  def with_defaults!(other_hash); end
  def with_defaults(other_hash); end
end
module ActionController::StrongParameters
  def params; end
  def params=(value); end
end
module AbstractController::Railties
end
module AbstractController::Railties::RoutesHelpers
  def self.with(routes, include_path_helpers = nil); end
end
module ActionController::Railties
end
module ActionController::Railties::Helpers
  def inherited(klass); end
end
class ActionController::Railtie < Rails::Railtie
end
