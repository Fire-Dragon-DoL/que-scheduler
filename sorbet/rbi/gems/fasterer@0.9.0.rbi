# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `fasterer` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Fasterer
end

class Fasterer::Analyzer
  def initialize(file_path); end

  def errors; end
  def file_path; end
  def path; end
  def scan; end

  private

  def scan_by_token(token, element); end
  def scan_for_loop(element); end
  def scan_method_calls(element); end
  def scan_method_definitions(element); end
  def scan_rescue(element); end
  def traverse_sexp_tree(sexp_tree); end
end

class Fasterer::Argument
  def initialize(element); end

  def element; end
  def type; end
  def value; end
end

class Fasterer::MethodCall
  def initialize(element); end

  def arguments; end
  def arguments_element; end
  def block_argument_names; end
  def block_body; end
  def element; end
  def has_block?; end
  def lambda_literal?; end
  def method_name; end
  def name; end
  def receiver; end
  def receiver_element; end

  private

  def call_element; end
  def set_arguments; end
  def set_block_argument_names; end
  def set_block_body; end
  def set_block_presence; end
  def set_call_element; end
  def set_method_name; end
  def set_receiver; end
end

class Fasterer::MethodCallScanner
  include(::Fasterer::Offensive)

  def initialize(element); end

  def element; end
  def method_call; end

  private

  def check_each_offense; end
  def check_each_with_index_offense; end
  def check_fetch_offense; end
  def check_first_offense; end
  def check_flatten_offense; end
  def check_gsub_offense; end
  def check_last_offense; end
  def check_merge_bang_offense; end
  def check_module_eval_offense; end
  def check_offense; end
  def check_range_include_offense; end
  def check_sort_offense; end
  def check_symbol_to_proc; end
end

class Fasterer::MethodDefinition
  def initialize(element); end

  def arguments; end
  def block_argument_name; end
  def body; end
  def element; end
  def has_block?; end
  def method_name; end
  def name; end
  def setter?; end

  private

  def arguments_element; end
  def last_argument_element; end
  def set_arguments; end
  def set_block_argument_name; end
  def set_body; end
  def set_method_name; end
end

class Fasterer::MethodDefinitionArgument
  def initialize(element); end

  def default_argument?; end
  def element; end
  def keyword_argument?; end
  def name; end
  def regular_argument?; end
  def type; end

  private

  def set_argument_type; end
  def set_name; end
end

class Fasterer::MethodDefinitionScanner
  include(::Fasterer::Offensive)

  def initialize(element); end

  def element; end

  private

  def check_offense; end
  def method_definition; end
  def scan_block_call_offense; end
  def scan_getter_and_setter_offense; end
  def scan_getter_offense; end
  def scan_setter_offense; end
  def traverse_tree(sexp_tree, &block); end
end

class Fasterer::Offense
  def initialize(offense_name, line_number); end

  def explanation; end
  def line; end
  def line_number; end
  def name; end
  def offense_name; end
end

Fasterer::Offense::EXPLANATIONS = T.let(T.unsafe(nil), Hash)

class Fasterer::OffenseCollector
  extend(::Forwardable)

  def initialize; end

  def [](offense_name); end
  def any?(*args, &block); end
  def count(*args, &block); end
  def each(*args, &block); end
  def group_by(*args, &block); end
  def push(*args, &block); end
end

module Fasterer::Offensive
  def offense; end
  def offense=(_arg0); end
  def offense_detected?; end
  def offensive?; end

  private

  def add_offense(offense_name, element_line_number = T.unsafe(nil)); end
  def check_offense; end
end

class Fasterer::Parser
  class << self
    def parse(ruby_code); end
  end
end

Fasterer::Parser::PARSER_CLASS = RubyParser

class Fasterer::Primitive
  def initialize(element); end

  def array?; end
  def element; end
  def range?; end
  def type; end
end

class Fasterer::ReceiverFactory
  class << self
    def new(receiver_info); end
  end
end

class Fasterer::RescueCall
  def initialize(element); end

  def element; end
  def rescue_classes; end

  private

  def set_rescue_classes; end
end

class Fasterer::RescueCallScanner
  include(::Fasterer::Offensive)

  def initialize(element); end

  def element; end

  private

  def check_offense; end
  def rescue_call; end
end

Fasterer::VERSION = T.let(T.unsafe(nil), String)

class Fasterer::VariableReference
  def initialize(reference_info); end

  def name; end
end
