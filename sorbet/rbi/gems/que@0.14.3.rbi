# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `que` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Que
  class << self
    def adapter; end
    def adapter=(_arg0); end
    def clear!; end
    def connection=(connection); end
    def constantize(camel_cased_word); end
    def create!; end
    def db_version; end
    def disable_prepared_statements; end
    def disable_prepared_statements=(setting); end
    def drop!; end
    def enqueue(*args); end
    def error_handler; end
    def error_handler=(p); end
    def error_notifier; end
    def error_notifier=(_arg0); end
    def execute(*args); end
    def job_stats; end
    def json_converter; end
    def json_converter=(_arg0); end
    def log(data); end
    def log_formatter; end
    def log_formatter=(_arg0); end
    def logger; end
    def logger=(_arg0); end
    def migrate!(version = T.unsafe(nil)); end
    def mode(*args); end
    def mode=(*args); end
    def queue_name(*args); end
    def queue_name=(*args); end
    def transaction; end
    def use_prepared_statements; end
    def use_prepared_statements=(_arg0); end
    def wake!(*args); end
    def wake_all!(*args); end
    def wake_interval(*args); end
    def wake_interval=(*args); end
    def worker_count(*args); end
    def worker_count=(*args); end
    def worker_states; end
  end
end

module Que::Adapters
end

class Que::Adapters::ActiveRecord < ::Que::Adapters::Base
  def checkout; end
  def cleanup!; end

  private

  def checkout_activerecord_adapter(&block); end
end

class Que::Adapters::Base
  def initialize(thing = T.unsafe(nil)); end

  def checkout(&block); end
  def cleanup!; end
  def execute(command, params = T.unsafe(nil)); end
  def in_transaction?; end
  def wake_worker_after_commit; end

  private

  def cast_result(result); end
  def execute_prepared(name, params); end
  def execute_sql(sql, params); end
end

Que::Adapters::Base::CAST_PROCS = T.let(T.unsafe(nil), Hash)

class Que::Adapters::ConnectionPool < ::Que::Adapters::Base
  def initialize(pool); end

  def checkout(&block); end
end

class Que::Adapters::PG < ::Que::Adapters::Base
  def initialize(pg); end

  def checkout; end
  def lock; end
end

class Que::Adapters::Pond < ::Que::Adapters::Base
  def initialize(pond); end

  def checkout(&block); end
end

class Que::Adapters::Sequel < ::Que::Adapters::Base
  def initialize(db); end

  def checkout(&block); end
  def wake_worker_after_commit; end
end

Que::HASH_DEFAULT_PROC = T.let(T.unsafe(nil), Proc)

Que::INDIFFERENTIATOR = T.let(T.unsafe(nil), Proc)

class Que::Job
  def initialize(attrs); end

  def _error; end
  def _run; end
  def attrs; end
  def run(*args); end

  private

  def destroy; end
  def error_count; end
  def error_message; end
  def handle_error(error); end
  def retry_in(period); end

  class << self
    def enqueue(*args); end
    def queue(*args); end
    def retry_interval; end
    def run(*args); end
    def work(queue = T.unsafe(nil)); end

    private

    def class_for(string); end
    def error_message(error); end
  end
end

module Que::Migrations
  class << self
    def db_version; end
    def migrate!(options = T.unsafe(nil)); end
    def set_db_version(version); end
  end
end

Que::Migrations::CURRENT_VERSION = T.let(T.unsafe(nil), Integer)

Que::SQL = T.let(T.unsafe(nil), Hash)

Que::SYMBOLIZER = T.let(T.unsafe(nil), Proc)

Que::Version = T.let(T.unsafe(nil), String)

class Que::Worker
  include(::MonitorMixin)

  def initialize(queue = T.unsafe(nil)); end

  def alive?; end
  def queue; end
  def sleeping?; end
  def state; end
  def stop; end
  def thread; end
  def wait_until_stopped; end
  def wake!; end
  def working?; end

  private

  def _sleeping?; end
  def wait; end
  def work_loop; end

  class << self
    def mode; end
    def mode=(mode); end
    def queue_name; end
    def queue_name=(_arg0); end
    def wake!; end
    def wake_all!; end
    def wake_interval; end
    def wake_interval=(interval); end
    def worker_count; end
    def worker_count=(count); end
    def workers; end

    private

    def set_up_workers; end
    def wrangler; end
  end
end
