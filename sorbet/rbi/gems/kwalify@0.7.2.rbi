# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `kwalify` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Kwalify
  extend(::Kwalify::Types)
  extend(::Kwalify::ErrorHelper)

  class << self
    def meta_validator; end
    def msg(key); end
    def word(key); end
  end
end

class Kwalify::AssertionError < ::Kwalify::KwalifyError
  def initialize(msg); end
end

class Kwalify::BaseError < ::Kwalify::KwalifyError
  def initialize(message = T.unsafe(nil), path = T.unsafe(nil), value = T.unsafe(nil), rule = T.unsafe(nil), error_symbol = T.unsafe(nil)); end

  def <=>(ex); end
  def _to_s; end
  def column; end
  def column=(_arg0); end
  def error_symbol; end
  def error_symbol=(_arg0); end
  def filename; end
  def filename=(_arg0); end
  def linenum; end
  def linenum=(_arg0); end
  def message; end
  def path; end
  def path=(_arg0); end
  def rule; end
  def rule=(_arg0); end
  def to_s; end
  def value; end
  def value=(_arg0); end
end

class Kwalify::BaseParser
  def _getch; end
  def _set_column_and_linenum(s); end
  def column; end
  def eos?; end
  def filename; end
  def group(n); end
  def linenum; end
  def match?(regexp); end
  def peep(n = T.unsafe(nil)); end
  def reset(input, filename = T.unsafe(nil), untabify = T.unsafe(nil)); end
  def scan(regexp); end
  def scan_string; end

  protected

  def _syntax_error(message, path = T.unsafe(nil), linenum = T.unsafe(nil), column = T.unsafe(nil)); end
end

Kwalify::BaseParser::CHAR_TABLE = T.let(T.unsafe(nil), Hash)

module Kwalify::Boolean
end

module Kwalify::ErrorHelper
  def assert_error(message = T.unsafe(nil)); end
  def schema_error(error_symbol, rule, path, val, args = T.unsafe(nil)); end

  private

  def _build_message(message_key, val, args); end
  def validate_error(error_symbol, rule, path, val, args = T.unsafe(nil)); end

  class << self
    def _build_message(message_key, val, args); end
    def validate_error(error_symbol, rule, path, val, args = T.unsafe(nil)); end
  end
end

module Kwalify::Json
end

class Kwalify::KwalifyError < ::StandardError
end

Kwalify::META_VALIDATOR = T.let(T.unsafe(nil), Kwalify::MetaValidator)

class Kwalify::MetaValidator < ::Kwalify::Validator
  def initialize(schema, &block); end

  def validate_hook(value, rule, path, errors); end

  class << self
    def instance; end
  end
end

Kwalify::MetaValidator::META_SCHEMA = T.let(T.unsafe(nil), String)

class Kwalify::Parser < ::Kwalify::YamlParser
  def initialize(yaml_str); end
end

class Kwalify::PlainYamlParser
  def initialize(yaml_str); end

  def has_next?; end
  def parse; end
  def parse_all; end

  protected

  def add_to_map(map, key, value, linenum); end
  def add_to_seq(seq, value, linenum); end
  def create_mapping(linenum = T.unsafe(nil)); end
  def create_scalar(value, linenum = T.unsafe(nil)); end
  def create_sequence(linenum = T.unsafe(nil)); end
  def current_line; end
  def current_linenum; end
  def merge_map(map, map2, linenum); end
  def set_default(map, value, linenum); end
  def set_map_with(map, key, value, linenum); end
  def set_seq_at(seq, i, value, linenum); end

  private

  def _getchar; end
  def _getline; end
  def assert(bool_expr); end
  def current_char; end
  def getchar; end
  def getchar_or_nl; end
  def getlabel; end
  def getline; end
  def parse_alias(column, value); end
  def parse_anchor(column, value); end
  def parse_block_text(column, value); end
  def parse_child(column); end
  def parse_flow(depth); end
  def parse_flow_map(depth); end
  def parse_flow_map_item(depth); end
  def parse_flow_scalar(depth); end
  def parse_flow_seq(depth); end
  def parse_flow_seq_item(depth); end
  def parse_flowstyle(column, value); end
  def parse_mapping(column, value); end
  def parse_scalar(indent, value); end
  def parse_sequence(column, value); end
  def parse_tag(column, value); end
  def parse_value(column, value, value_start_column); end
  def register_alias(label); end
  def register_anchor(label, data); end
  def reset_sbuf(str); end
  def resolve_aliases(data); end
  def syntax_error(error_symbol, arg = T.unsafe(nil), linenum = T.unsafe(nil)); end
  def to_scalar(str); end
  def white?(ch); end
end

class Kwalify::PlainYamlParser::Alias
  def initialize(label, linenum); end

  def label; end
  def linenum; end
end

Kwalify::RELEASE = T.let(T.unsafe(nil), String)

class Kwalify::Rule
  include(::Kwalify::ErrorHelper)

  def initialize(hash = T.unsafe(nil), parent = T.unsafe(nil)); end

  def _init(hash, path = T.unsafe(nil), rule_table = T.unsafe(nil)); end
  def _uniqueness_check_table; end
  def assert; end
  def assert_proc; end
  def classname; end
  def classobj; end
  def default; end
  def desc; end
  def enum; end
  def ident; end
  def length; end
  def mapping; end
  def name; end
  def parent; end
  def parent=(_arg0); end
  def pattern; end
  def range; end
  def regexp; end
  def required; end
  def sequence; end
  def type; end
  def type_class; end
  def unique; end

  protected

  def _inspect(str = T.unsafe(nil), level = T.unsafe(nil), done = T.unsafe(nil)); end
  def get_init_method(sym); end

  private

  def _check_confliction(hash, rule, path); end
  def _init_assert_value(val, rule, path); end
  def _init_class_value(val, rule, path); end
  def _init_default_value(val, rule, path); end
  def _init_desc_value(val, rule, path); end
  def _init_enum_value(val, rule, path); end
  def _init_ident_value(val, rule, path); end
  def _init_length_value(val, rule, path); end
  def _init_mapping_value(val, rule, path, rule_table); end
  def _init_name_value(val, rule, path); end
  def _init_pattern_value(val, rule, path); end
  def _init_range_value(val, rule, path); end
  def _init_required_value(val, rule, path); end
  def _init_sequence_value(val, rule, path, rule_table); end
  def _init_type_value(val, rule, path); end
  def _init_unique_value(val, rule, path); end
end

module Kwalify::Scalar
end

class Kwalify::SchemaError < ::Kwalify::BaseError
  def initialize(message = T.unsafe(nil), path = T.unsafe(nil), rule = T.unsafe(nil), value = T.unsafe(nil), error_symbol = T.unsafe(nil)); end
end

class Kwalify::SyntaxError < ::Kwalify::BaseError
  def initialize(msg, linenum = T.unsafe(nil), error_symbol = T.unsafe(nil)); end

  def message; end
end

module Kwalify::Text
  include(::Kwalify::Scalar)
end

module Kwalify::Types

  private

  def collection?(val); end
  def collection_type?(type); end
  def scalar?(val); end
  def scalar_type?(type); end

  class << self
    def collection?(val); end
    def collection_type?(type); end
    def get_type_class(type); end
    def scalar?(val); end
    def scalar_type?(type); end
    def type_class(type); end
    def type_table; end
  end
end

Kwalify::Types::DEFAULT_TYPE = T.let(T.unsafe(nil), String)

module Kwalify::Util

  private

  def _traverse_rule(rule, _done = T.unsafe(nil), &block); end
  def _traverse_schema(hash, _done = T.unsafe(nil), &block); end
  def create_hashtable(hashlist, primarykey, flag_duplicate_check = T.unsafe(nil)); end
  def get_class(classname); end
  def get_value(obj, path); end
  def traverse_rule(validator, &block); end
  def traverse_schema(schema, &block); end
  def untabify(str, width = T.unsafe(nil)); end

  class << self
    def _traverse_rule(rule, _done = T.unsafe(nil), &block); end
    def _traverse_schema(hash, _done = T.unsafe(nil), &block); end
    def create_hashtable(hashlist, primarykey, flag_duplicate_check = T.unsafe(nil)); end
    def get_class(classname); end
    def get_value(obj, path); end
    def traverse_rule(validator, &block); end
    def traverse_schema(schema, &block); end
    def untabify(str, width = T.unsafe(nil)); end
  end
end

module Kwalify::Util::HashLike
  def [](key); end
  def []=(key, val); end
  def each; end
  def key?(key); end
end

class Kwalify::ValidationError < ::Kwalify::BaseError
  def initialize(message = T.unsafe(nil), path = T.unsafe(nil), rule = T.unsafe(nil), value = T.unsafe(nil), error_symbol = T.unsafe(nil)); end
end

class Kwalify::Validator
  include(::Kwalify::ErrorHelper)

  def initialize(hash_or_rule, &block); end

  def _inspect; end
  def _validate(value, rule, path, errors, done, uniq_table, recursive = T.unsafe(nil)); end
  def _validate_mapping_required_keys(hash, map_rule, path, errors); end
  def _validate_unique(value, rule, path, errors, uniq_table); end
  def rule; end
  def validate(value); end

  protected

  def validate_hook(value, rule, path, errors); end

  private

  def _validate_assert(value, rule, path, errors); end
  def _validate_enum(value, rule, path, errors); end
  def _validate_length(value, rule, path, errors); end
  def _validate_mapping(hash, map_rule, path, errors, done, uniq_table, recursive = T.unsafe(nil)); end
  def _validate_pattern(value, rule, path, errors); end
  def _validate_range(value, rule, path, errors); end
  def _validate_scalar(value, rule, path, errors, done, uniq_table); end
  def _validate_sequence(list, seq_rule, path, errors, done, uniq_table, recursive = T.unsafe(nil)); end
end

module Kwalify::Yaml
  class << self
    def load(yaml_str, opts = T.unsafe(nil)); end
    def load_file(filename, opts = T.unsafe(nil)); end
  end
end

class Kwalify::Yaml::Parser < ::Kwalify::BaseParser
  def initialize(validator = T.unsafe(nil), properties = T.unsafe(nil)); end

  def _parse_map_value(map, map_rule, path, level, key, is_merged, uniq_table, _linenum, _column, _linenum2, _column2); end
  def _set_error_info(linenum = T.unsafe(nil), column = T.unsafe(nil), &block); end
  def _validate_map_value(map, map_rule, rule, path, uniq_table, key, val, _linenum, _column); end
  def data_binding; end
  def data_binding=(_arg0); end
  def document_start?; end
  def errors; end
  def has_next?; end
  def location(path); end
  def mapping_class; end
  def mapping_class=(_arg0); end
  def parse(input = T.unsafe(nil), opts = T.unsafe(nil)); end
  def parse_alias(rule, path, uniq_table, container); end
  def parse_anchor(rule, path, uniq_table, container); end
  def parse_block_map(map, map_rule, path, uniq_table); end
  def parse_block_scalar(rule, path, uniq_table); end
  def parse_block_seq(seq, seq_rule, path, uniq_table); end
  def parse_block_text(column, rule, path, uniq_table); end
  def parse_block_value(level, rule, path, uniq_table, container); end
  def parse_documents(input, opts = T.unsafe(nil), &block); end
  def parse_file(filename, opts = T.unsafe(nil)); end
  def parse_flow_map(map, map_rule, path, uniq_table); end
  def parse_flow_scalar(rule, path, uniq_table); end
  def parse_flow_seq(seq, seq_rule, path, uniq_table); end
  def parse_flow_value(rule, path, uniq_table, container); end
  def parse_next; end
  def parse_stream(input, opts = T.unsafe(nil), &block); end
  def preceding_alias; end
  def preceding_alias=(_arg0); end
  def reset_parser; end
  def reset_scanner(input, filename = T.unsafe(nil), untabify = T.unsafe(nil)); end
  def resolve_preceding_aliases(val); end
  def sequence_class; end
  def sequence_class=(_arg0); end
  def set_errors_linenum(errors); end
  def skip_spaces_and_comments; end
  def stream_end?; end
  def to_scalar(str); end
  def validator; end
  def validator=(_arg0); end

  protected

  def _getclass(classname); end
  def add_to_seq(rule, seq, val, linenum, column); end
  def create_mapping(rule, linenum, column); end
  def create_scalar(rule, value, linenum, column); end
  def create_sequence(rule, linenum, column); end
  def put_to_map(rule, map, key, val, linenum, column); end

  private

  def _error(klass, message, path, linenum, column); end
  def to_mapkey(str); end
end

Kwalify::Yaml::Parser::MAPKEY_PATTERN = T.let(T.unsafe(nil), Regexp)

Kwalify::Yaml::Parser::PRECEDING_ALIAS_PLACEHOLDER = T.let(T.unsafe(nil), Object)

class Kwalify::YamlParser < ::Kwalify::PlainYamlParser
  def initialize(*args); end

  def parse; end
  def path_linenum(path); end
  def set_error_linenums(errors); end
  def set_errors_linenum(errors); end

  protected

  def add_to_map(map, key, value, linenum); end
  def add_to_seq(seq, value, linenum); end
  def create_mapping(linenum = T.unsafe(nil)); end
  def create_scalar(value, linenum = T.unsafe(nil)); end
  def create_sequence(linenum = T.unsafe(nil)); end
  def merge_map(map, collection, linenum); end
  def set_default(map, value, linenum); end
  def set_map_with(map, key, value, linenum); end
  def set_seq_at(seq, i, value, linenum); end
end

class Kwalify::YamlSyntaxError < ::Kwalify::SyntaxError
end
